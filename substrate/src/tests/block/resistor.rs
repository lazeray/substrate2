use std::{collections::HashMap, sync::Arc};

use arcstr::ArcStr;
use serde::{Deserialize, Serialize};

use crate::{
    block::Block,
    schematic::{
        cell::SchematicCell,
        context::SchematicCtx,
        instance::{Instance, SchematicInstance},
        interface::{AnalogInterface, Port, SignalMap},
        HasSchematic,
    },
};

#[derive(Debug, Clone, Copy)]
pub struct ResistorIntf {
    pub p: Port,
    pub n: Port,
}

// AUTOGENERATED CODE BEGIN
#[derive(Debug, Clone, Copy)]
pub struct ResistorIntfUninitialized;

#[allow(clippy::new_ret_no_self)]
impl ResistorIntf {
    fn new() -> ResistorIntfUninitialized {
        ResistorIntfUninitialized
    }
}

impl AnalogInterface<Resistor> for ResistorIntf {
    type Uninitialized = ResistorIntfUninitialized;

    fn initialize(_intf: Self::Uninitialized, map: &mut SignalMap) -> Self {
        ResistorIntf {
            p: map.register_port(),
            n: map.register_port(),
        }
    }

    fn uninitialized(self) -> ResistorIntfUninitialized {
        ResistorIntfUninitialized
    }
}
// AUTOGENERATED CODE END

#[derive(Serialize, Deserialize)]
pub struct Resistor {
    pub r: usize,
}

impl Block for Resistor {
    fn id() -> ArcStr {
        arcstr::literal!("resistor")
    }

    fn name(&self) -> ArcStr {
        arcstr::format!("resistor_{}", self.r)
    }
}

// AUTOGENERATED CODE BEGIN
#[derive(Debug, Clone)]
pub struct ResistorCell {
    intf: ResistorIntf,
    instances: Vec<Instance>,
    signal_map: SignalMap,
}

impl SchematicCell<Resistor> for ResistorCell {
    fn new(intf: ResistorIntfUninitialized) -> Self {
        let mut map = SignalMap::new();
        ResistorCell {
            intf: ResistorIntf::initialize(intf, &mut map),
            instances: Vec::new(),
            signal_map: map,
        }
    }

    fn add_instance<T, N>(&mut self, name: N, cell: Arc<T::Cell>) -> T::Instance
    where
        T: HasSchematic,
        N: Into<ArcStr>,
    {
        let intf = self.initialize_interface::<T>(cell.interface().clone().uninitialized());
        let inst = T::Instance::new(name, intf, cell);
        self.instances.push(inst.clone().into());
        inst
    }

    fn instances(&self) -> &Vec<Instance> {
        &self.instances
    }

    fn signal_map(&self) -> &SignalMap {
        &self.signal_map
    }

    fn signal_map_mut(&mut self) -> &mut SignalMap {
        &mut self.signal_map
    }

    fn interface(&self) -> &ResistorIntf {
        &self.intf
    }
}

#[derive(Debug, Clone)]
pub struct ResistorInstance {
    name: ArcStr,
    intf: ResistorIntf,
    cell: Arc<ResistorCell>,
}

#[allow(clippy::from_over_into)]
impl Into<Instance> for ResistorInstance {
    fn into(self) -> Instance {
        Instance {
            name: self.name,
            instances: self.cell.instances().clone(),
            ports: HashMap::from_iter([("p".into(), self.intf.p), ("n".into(), self.intf.n)]),
        }
    }
}

impl SchematicInstance<Resistor> for ResistorInstance {
    fn new(name: impl Into<ArcStr>, intf: ResistorIntf, cell: Arc<ResistorCell>) -> Self {
        ResistorInstance {
            name: name.into(),
            intf,
            cell,
        }
    }

    fn name(&self) -> ArcStr {
        self.name.clone()
    }

    fn intf(&self) -> &ResistorIntf {
        &self.intf
    }
}
// AUTOGENERATED CODE END

impl HasSchematic for Resistor {
    type Interface = ResistorIntf;
    type Cell = ResistorCell;
    type Instance = ResistorInstance;

    fn schematic(&self, _ctx: &mut SchematicCtx) -> Self::Cell {
        Self::Cell::new(ResistorIntf::new())
    }
}
